<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xml文件SQL语句踩坑</title>
      <link href="/post/847a5d12.html"/>
      <url>/post/847a5d12.html</url>
      
        <content type="html"><![CDATA[<p>今天写完新功能后在Navicat上测试了下SQL就提交到了服务器,发布之后发现代码跑不起来😥😥😥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getUserGrowthOverview&quot; resultType=&quot;com.createyun.intel.shop.mall.operationsPanel.vo.MerchantUserVo&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS todayNewUser,</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AND mu.register_time &lt; DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS yesterdayNewUser,</span><br><span class="line">    ROUND(</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) /</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AND mu.register_time &lt; DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) - 1,2) AS dayRingRatio,</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_FORMAT(NOW(), &#x27;%Y-%m-01&#x27;), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS monthNewUser</span><br><span class="line">        from mall_user mu</span><br><span class="line">        where</span><br><span class="line">        1=1</span><br><span class="line">        and mch_id = #&#123;query.mchId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/xml文件SQL语句踩坑/image-20231121162038533.png" alt=""></p><p><img src="../images/xml文件SQL语句踩坑/image-20231121162412222.png" alt=""></p><p>糟糕糟糕!😱是我没有见过的异常</p><p>一番折腾之后找到了原因</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getUserGrowthOverview&quot; resultType=&quot;com.createyun.intel.shop.mall.operationsPanel.vo.MerchantUserVo&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS todayNewUser,</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AND mu.register_time  &lt;![CDATA[&lt;]]&gt;  DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS yesterdayNewUser,</span><br><span class="line">    ROUND(todayNewUser / IFNULL(yesterdayNewUser, 1) - 1, 2) AS dayRingRatio,</span><br><span class="line">    COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_FORMAT(NOW(), &#x27;%Y-%m-01&#x27;), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS monthNewUser</span><br><span class="line">        from mall_user mu</span><br><span class="line">        where</span><br><span class="line">        1=1</span><br><span class="line">        and mch_id = #&#123;query.mchId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>现在对比一下前后两天SQL的差异 😲</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AND mu.register_time &lt; DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS yesterdayNewUser,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COUNT(IF(mu.register_time &gt;= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AND mu.register_time  &lt;![CDATA[&lt;]]&gt;  DATE_FORMAT(NOW(), &#x27;%Y-%m-%d 00:00:00&#x27;), mu.id, NULL)) AS yesterdayNewUser,</span><br></pre></td></tr></table></figure><p>是的,你没猜错.SQL里的 <code>&lt;</code> 被解析成标签了 😐</p><p>所以,我需要使用CDATA包围这个 <code>&lt;</code> ,防止他进行字符转换 😉</p><p>那么CDATA有什么作用呢?🤔</p><p>CDATA的主要作用是:</p><blockquote><ol><li>包含不能由XML标记字符(尖括号、安培桑等)表示的文本数据。</li><li>避免文本数据被XML解析器进行处理。</li><li>允许XML元素包含不能被XML解析的内容。</li></ol></blockquote><p>所以CDATA是XML的一个重要组成部分,用来处理特殊文本内容。不加CDATA可能会导致XML文件解析错误。</p><p>你,明白了吗?</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量修改MySql数据库中字段类型</title>
      <link href="/post/82941eb7.html"/>
      <url>/post/82941eb7.html</url>
      
        <content type="html"><![CDATA[<p>今天遇到个问题: 数据库中有很多时间字段类型为date, 导致返回给前端时,数据变成</p><p>2023:10:12:00:00:00 类似的格式,没有具体的时分秒.</p><p>在百度之后找到了批量修改字段类型的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">        TABLE_NAME,</span><br><span class="line">        COLUMN_NAME,</span><br><span class="line">        DATA_TYPE,</span><br><span class="line">CONCAT( &#x27;ALTER TABLE &#x27;, TABLE_NAME, &#x27; MODIFY COLUMN &#x27;, COLUMN_NAME, &#x27; datetime;&#x27; )</span><br><span class="line">FROM</span><br><span class="line">information_schema.COLUMNS</span><br><span class="line">        WHERE</span><br><span class="line">TABLE_SCHEMA = &#x27;your database name&#x27;</span><br><span class="line">AND DATA_TYPE = &#x27;date&#x27;;</span><br></pre></td></tr></table></figure><p>查询之后,我们只需要把返回的结果中的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONCAT( &#x27;ALTER TABLE &#x27;, TABLE_NAME, &#x27; MODIFY COLUMN &#x27;, COLUMN_NAME, &#x27; datetime;&#x27; )  </span><br></pre></td></tr></table></figure><p>这一列中的结果复制后直接执行</p><p>然后数据库中所有表中类型为date的的字段类型改为datetime了 😎</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白也能看懂的～墙内数字难民翻墙小指北~</title>
      <link href="/post/%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%EF%BD%9E%E5%A2%99%E5%86%85%E6%95%B0%E5%AD%97%E9%9A%BE%E6%B0%91%E7%BF%BB%E5%A2%99%E5%B0%8F%E6%8C%87%E5%8C%97~.html"/>
      <url>/post/%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%EF%BD%9E%E5%A2%99%E5%86%85%E6%95%B0%E5%AD%97%E9%9A%BE%E6%B0%91%E7%BF%BB%E5%A2%99%E5%B0%8F%E6%8C%87%E5%8C%97~.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>2023 年 11 月 2 日，知名翻墙软件 Clash For Windows 的开发者 @Fndroid 在 Telegram、X 平台宣布终止项目更新，并删除了 GitHub 里的整个库。</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/296f5c60cbde1736961a9.png" alt="CFW 原项目 现已富强民主文明和谐"></p><p>而仅仅一天时间不到，Clash Core（各 Clash GUI 客户端的内核）、Clash.Meta、CFA 也相继删库，属于 Clash 的翻墙时代也正式寿终正寝。对于仍然生活在墙内的小白而言，会有多大的影响？今后该如何翻墙？在墙外网络上似乎掀起了一小波恐慌。</p><p>这篇文章的适用对象为普通墙内难民，用语尽最大力度通俗易懂，所用到的工具也是极其简单，不必担心过于复杂而看不懂。</p><p>此文章属于基础，考虑到简单易用，不涉及任何 Linux 相关的内容</p><h3 id="1-1-环境"><a href="#1-1-环境" class="headerlink" title="1.1 环境"></a>1.1 环境</h3><p><strong>安全的上网环境是一切的开端</strong></p><p>考虑到不同的群体，我逐一针对性讲解：</p><p>对于 PC / 笔记本电脑的墙内难民，我依然优先建议使用 Windows。对于大部分人而言，我翻墙，就是看看政治新闻、了解一下墙外，亦或者是看自己喜欢的明星、用不惯墙内的 App，就没有任何必要采取极端的安全保护策略。</p><p>考虑到微软中国存在着特供版 Windows 的情况，只建议在微软官网（非简体中文）下载最新版本的 Windows 11，具体的安装教程可以自行 Google，这里不多描述。</p><p>我个人是将 Windows 安装到 U 盘中使用的，便于存储，也便于销毁</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/1d9184eb28232325c0696.png" alt="微软官网"></p><p><a href="https://www.microsoft.com/software-download/windows11">https://www.microsoft.com/software-download/windows11</a></p><p>对于 Android 难民，如果你有更换手机的打算，可以考虑购买全新的 Google Pixel 系列或者三星 Galaxy<strong>(非中国大陆发行的)</strong>。</p><p>Google Pixel 中的 Titan M 系列晶片和 Samsung Knox 都可以从硬件层面上抵御外界的破解攻击</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/282aae92d08f4cbbac99e.png" alt="Google Titan "></p><blockquote><p>案例：2019 年 8 月 30 日，香港反修例运动期间。黄之锋被香港警察拘捕，港警未要求他提供任何手机密码，他的 iPhone XR 却遭到了以色列软件 Cellebrite UFED Physical Analyzer 和瑞典的 MSAB XRY 的破解并成功提取到 WhatsAPP 与 Telegram 的对话内容。而同样被拘捕的周庭，他的 Google Pixel 却未能被警方破解成功。</p></blockquote><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/4f2f890140e9d6fa5bbe4.png" alt="黄之锋的 FB"></p><p>但相比于一个安全无漏洞的手机，在墙内，<strong>App 隔离才是最好的选择</strong>。我更建议墙内外软件分别安装在不同的手机中。如果你目前的确没有足够的经济条件做到换新 / 双机，可以考虑对手机进行刷机。我在之前发过一篇介绍各大类原生 ROM 的推文，如有需求可供参考。<a href="https://x.com/yura8964/status/1689286347004030977">https://x.com/yura8964/status/1689286347004030977</a></p><p>Google Pixel 用户可以考虑 Graphene OS 获取更高级别的保护，</p><p><strong>ROOT / 刷第三方 ROM / 刷不同国家的 OneUI 版本等举措会熔断你手机中的 Knox 晶片！！</strong>但 SAMSUNG 中国大陆版本的用户可以自行安装香港版本的 OneUI，此操作并不会熔断你的 Knox。</p><p>如果你的三星手机不是中国大陆发行的，不需要进行任何操作。</p><p><strong>如果你是华为用户，我没有任何能够帮助你的建议。果咩纳塞。</strong></p><p>最后就是对于 iOS 难民 ——iOS 相对中国海量手机 UI 来讲，是比较安全的。</p><p>不过有以下几点你要注意：</p><p><strong>云上贵州</strong></p><p>中国大陆的 Apple ID 的 iCloud 数据归于云上贵州所管理。它的运营方是贵州省人民政府。受影响的范围包括照片、文件、通讯录、信息和任何会上传到云端的资料。</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/180b647991eace6991249.png" alt="中国特色"></p><p>当你登录中国区 Apple ID 时，Apple 会告诉你需要遵守中国大陆的 “隐私法规”。(你说法律我都觉得有些好笑)。</p><p>因此，使用 Apple 设备的第一件事情就是登陆境外的 Apple ID (App Store 可登录中国区，不影响 iCloud)</p><p><strong>2. 国行与非国行</strong></p><p>除中华民国国旗 Emoji 外，中国大陆发行的 Apple 设备阉割了 CallKit、Facetime Audio 等 Apple 特有的功能。所以这边不建议购买来自中国大陆的 Apple 设备。</p><ol><li>锁定模式</li></ol><p>2022 年 iOS16 发布后，Apple 在设备中推出了一个软件层面保护手机的功能 —— 锁定模式</p><p>(Lockdown Mode)</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/9c40c211c5a2c3e25d8e2.png" alt="锁定模式"></p><p>它可以 ——</p><p>限制某些 JavaScript 和影片播放系统等常被攻击的网页功能</p><p>封锁大部分的邮件附档类型，只能传送图片</p><p>停用苹果的「共享相簿」功能</p><p>封锁未知用户的来电</p><p>禁止有线连接任何其他装置</p><p>停用公司用来控制、跟踪或管理装置设备的软件</p><p>无法安装任何描述文件</p><p>有信息洁癖者可以考虑启用。</p><p><strong>当然，还是在此建议各位不要在翻墙的手机上插入 + 86 手机卡！只要插入，运营商即可获取到你的手机型号 \IMEI 等大量隐私信息！</strong></p><h3 id="1-2-开始翻墙"><a href="#1-2-开始翻墙" class="headerlink" title="1.2 开始翻墙"></a>1.2 开始翻墙</h3><p>有大量的安全 VPN (如 NordVPN) 因为防火墙的原因在中国大陆无法使用，而野鸡机场也存在风险，在这里我不推荐任何代理网络商，只简单教大家如何选择相对安全的机场运营商：</p><h4 id="1-支持加密货币"><a href="#1-支持加密货币" class="headerlink" title="1. 支持加密货币"></a>1. 支持加密货币</h4><p>使用加密货币 (USDT/BTC) 支付是最安全的购买方式</p><h4 id="2-机场主肉身不在中国"><a href="#2-机场主肉身不在中国" class="headerlink" title="2. 机场主肉身不在中国"></a>2. 机场主肉身不在中国</h4><p>如果机场主被抓咯那你就等死吧</p><h4 id="3-无日志"><a href="#3-无日志" class="headerlink" title="3. 无日志"></a>3. 无日志</h4><p>日志记载着用户的信息，无日志的机场一定程度保障了用户的安全</p><h4 id="4-大法是检验机场的唯一标准"><a href="#4-大法是检验机场的唯一标准" class="headerlink" title="4. 大法是检验机场的唯一标准"></a>4. 大法是检验机场的唯一标准</h4><p>不少机场主为了自己的安全，或者出于政治立场考虑，屏蔽了诸如品葱、大寄原、三退网等轮系网站，更有甚者屏蔽了 VOA、RFA (这种铁定是粉红机场主)。我不是轮友，但法轮功是检验机场的唯一标准，一个能访问政治类网站的机场才是真的做到了最基本的安全，即使不喜欢法轮功。</p><p>接着讲到代理工具。前言降到了 Clash 的陨落，但这并不影响翻墙。Clash 依然可以正常使用，但是后续不会有更新，旧版本的 Clash 也存在着大量的漏洞</p><p>Clash 的分流功能依然是它的主打强项，在这点 V2ray 是无法超越的。(全局 IP 的弊端就在于你的墙内 APP 和墙外 APP 都用了同一个 IP)。</p><p>对于 PC，可以考虑继续使用 Clash Verge</p><p>或者你可以使用 NekoRay / NekoBox For PC</p><p><a href="https://github.com/MatsuriDayo/nekoray/releases">Releases · MatsuriDayo/nekoray (github.com)</a></p><p>对于 Android，除了 Clash, 你可以考虑使用 NekoBox for Android（<a href="https://github.com/Matsuridayo/NekoBoxForAndroid/releases">Releases · MatsuriDayo/NekoBoxForAndroid (github.com)</a>）/V2RAY NG+Surfshark</p><p>或者 Surfboard</p><p>iOS 用户，性价比买 Shadowrocket，用得好就买 Quantumult X ，富哥上 Surge</p><p>Mac 用户可以继续考虑 ClashX 或者使用昂贵的 Surge</p><h3 id="1-3-进阶-——-个人信息与社会工程学"><a href="#1-3-进阶-——-个人信息与社会工程学" class="headerlink" title="1.3 进阶 —— 个人信息与社会工程学"></a>1.3 进阶 —— 个人信息与社会工程学</h3><p>讲完了翻墙的基本条件，那么恭喜你，你学会了如何正确翻墙</p><p>接下来要讲的是你会进行的下一步，就是注册账号、所面临的 App 等等</p><p>为防止滥用，绝大部分 App 已经开始了手机号验证注册，你需要一个好用的境外手机号 ——</p><p>你可以考虑 Google Voice，它可以应对很多网站，但也有一些网站比如 X (Twitter) 已经将其列入了注册黑名单</p><p>你也可以考虑 SMS-Activate 等一次性接码网站，这个方法使用在 Telegram\Signal 最佳，X 注册后开启双重认证也可以用来过渡</p><p>最后就是境外手机卡。但境外手机卡在中国依然走中国的基站，依然存在高风险，有条件的可以考虑透过 esim 使用在中国收不到讯号但支持 WIFI-CALLING 的运营商号码，例如 T-Mobile 旗下的一些合作套餐 (UltraMobile/Tello)</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/a3d85debe9abb0bdc84c8.png" alt=""></p><p><strong>绝大部分 App 都存在着双重验证，此操作你需要一个智能手机设置一个令牌。强烈建议开启，这会使你的账号更加安全。</strong></p><p>紧接着讲到设置密码，这里我推荐 1Password (收费但简洁) 或者 Bitwarden 自建 (最安全) 生成一个强复杂的密码并储存。——</p><p>你可能要问了，我用日记本写下来，或者放入手机备忘录里不是更好吗？</p><p><strong>不好，因为那是明文的。</strong></p><p>注册完你的账号，你需要设置一个 ID。从这里开始，你要注意 —— 你的 ID、头像风格与语言习惯要与墙内避开，更不要傻乎乎的把自己的微信支付宝收款码挂在自己的主页。</p><p>你的语言习惯影响着你的安全，包括你的作息，这都是辨认你身份的方法。</p><p>比如你今天在中国吃了麦当劳，你发到了墙内，同时发到了墙外，不抓你抓谁？</p><p>你今年要考英语六级，你发在了推特；你买了什么什么东西，你发在了推特；你今晚去过什么地方，你甚至拍照发了推 —— 除非你不涉政，不然就是找死</p><p>你在墙内的语气和墙外一样，标点符号的使用方式也一样，甚至头像都出奇类似，这种情况不抓你抓谁？</p><p>更有甚者，墙内外 ID 头像同名，或者墙内冲塔不满了，截图发到墙外。</p><h4 id="不抓你抓谁？"><a href="#不抓你抓谁？" class="headerlink" title="不抓你抓谁？"></a>不抓你抓谁？</h4><h3 id="1-4-聊天工具"><a href="#1-4-聊天工具" class="headerlink" title="1.4 聊天工具"></a>1.4 聊天工具</h3><p>前情提要：不要和任何人，尤其是肉身在墙内的添加墙内联系方式 ——</p><p>对于你要网络交友，我更推荐以下平台</p><p>普通情况下，可以考虑 Telegram (Telegram 默认不开启端到端加密，需要手动在头像上方开启加密对话 —— 记住，非加密对话是可以被<strong>中国刑侦软件</strong>取证的)</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/95ebbd32919811d2b42b5.jpg" alt="一家公司的刑侦软件"></p><p>高阶层的安全，可以使用 <strong>Signal (本人爱用，也最安全，注册需要用到手机号) /Session（注册简单）/Status (使用者少)，这三款软件目前警察无法取证</strong></p><p>如果你是 iOS 用户，可以开启 iMessage，这是苹果用户独有的聊天功能。默认端到端加密，比 Telegram 更安全。</p><h3 id="1-5-邮箱"><a href="#1-5-邮箱" class="headerlink" title="1.5 邮箱"></a>1.5 邮箱</h3><p>Proton Mail 和 Tutanota 是我最推荐的两家电子邮箱服务商</p><p>如有需求，也可以搭配 Duck 邮箱实现只收不发</p><h3 id="1-6-浏览器"><a href="#1-6-浏览器" class="headerlink" title="1.6 浏览器"></a>1.6 浏览器</h3><p>我不推荐 Google Chrome</p><p>Firefox ESR 是我最推荐的 Windows/Android 浏览器，其次是 Brave 与 Oprea</p><p>请注意，Firefox 存在墙内特供版</p><p><a href="https://www.mozilla.org/en-US/firefox/enterprise/">https://www.mozilla.org/en-US/firefox/enterprise/</a> 请在此网址下载</p><p>Apple 用户使用 Safari 即可</p><p><strong>但请记住，关闭 “设置 - Safari 浏览器 - 欺骗性网站警告”，因为这项服务是由腾讯提供的（包括香港特别行政区）</strong></p><p>对于翻墙的多数而言，你不需要 Tor 级别的安全程度</p><hr><h3 id="2-1-为什么要说信息保护是在为润做铺垫？"><a href="#2-1-为什么要说信息保护是在为润做铺垫？" class="headerlink" title="2.1 为什么要说信息保护是在为润做铺垫？"></a>2.1 为什么要说信息保护是在为润做铺垫？</h3><p>当代互联网不会存在那么多未解之谜。</p><p>当你连接中国互联网的那一刻起，你便不再有隐私可言。任何极端的信息保护措施，包括使用 Tail\Qubes\Whonix\Parrot OS，也无法保证人类的疏忽大意。</p><p>硬盘加密，有用吗？有</p><p>编程随想，在墙内苟活十余年。所有在中国大陆的持不同政见者能有他这样的防范意识的也寥寥无几。早期小小的 “rxh” 失误，最后失手被捕。他倡导硬盘加密，但被逮捕后警察依然能将电脑中的内容顺利取证。</p><p>很多时候，信息保护是次要的，出卖你的恰巧可能不是软硬件上的安全，而是不经意间的疏忽 —— 冲浪之音的 b23.tv 短链、透露自己的出生年月，这都是一个又一个推友被抓的原因。假设警察抓捕了你，你电脑安全措施做得再好，搞了层层加密，那又有什么用呢？你只会吃更多的刑讯逼供而已。</p><p>所以对于我们，尤其是喜欢在网络上键政的，信息保护就是为了给你安全润出做铺垫。</p><p><img src="../images/小白也能看懂的～墙内数字难民翻墙小指北/f879918e4c417522f4967.gif" alt="啦啦啦"></p>]]></content>
      
      
      <categories>
          
          <category> Clash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们为什么构建 React</title>
      <link href="/post/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%84%E5%BB%BA%20React.html"/>
      <url>/post/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%84%E5%BB%BA%20React.html</url>
      
        <content type="html"><![CDATA[<p>现在已经存在很多 JavaScript MVC 框架了，为什么我们还要创建 React 并且你为什么会去用它？</p><h2 id="React-并不是一个-MVC-框架"><a href="#React-并不是一个-MVC-框架" class="headerlink" title="React 并不是一个 MVC 框架"></a>React 并不是一个 MVC 框架</h2><p>React 是一个构建合成式用户界面的库。它鼓励创建可重用的 UI 组件，这些组件能跟随数据变化进行展示。</p><h2 id="React-不使用模板"><a href="#React-不使用模板" class="headerlink" title="React 不使用模板"></a>React 不使用模板</h2><p>通常，Web 应用使用模板或 HTML 指令来构建用户界面。这些模板主导了所用你可以用来构建用户界面的抽象集合。</p><p>React 允许通过把用户界面拆分成<strong>组件</strong>来进行构建。这意味着 React 使用了真正的、全功能的编程语言来渲染视图，这样一来相对模板语言具有一定优势，原因如下：</p><ul><li><strong>JavaScript 是一个灵活的，强大的具有抽象能力的编程语言</strong>。这在大型应用中非常重要。</li><li>通过统一你的标记和它所对应的视图逻辑，React 实际上可以使视图<strong>更容易扩展和维护</strong>。</li><li>通过将标记和内容解释成 JavaScript，这里就<strong>没有手动的字符串插入</strong>，因此降低了 XSS 漏洞的暴露面积。</li></ul><p>我们同样提供了 JSX，一个可选的语法扩展，如果你喜欢使用 HTML 的易读性来书写原生 JavaScript。</p><h2 id="即时更新非常简单"><a href="#即时更新非常简单" class="headerlink" title="即时更新非常简单"></a>即时更新非常简单</h2><p>当数据随着时间更新时，React 会跟随着变化。</p><p>在一个传统的 JavaScript 应用中，你需要去监控什么数据发生了改变，然后立刻操作 DOM 节点来确保视图和数据保持一致。即使 AngularJS，也需要通过指令和数据绑定提供一个声明式的接口<a href="https://code.angularjs.org/1.0.8/docs/guide/directive#reasonsbehindthecompilelinkseparation">需要绑定一个函数来手动更新 DOM 节点</a>。</p><p>React 采用不用的方法</p><p>当你的组件第一次初始化，<code>render</code> 方法被调用，生成轻量级表现形式的视图。通过这个表现形式，标签字符串被生成，然后插入到文档中。当数据发生变化时，<code>render</code> 方法再次被调用。为了确保更新的高效性，我们将上次和本次 <code>render</code> 方法的返回值进行比较，然后生成最小的变化来应用到 DOM 结构中。</p><blockquote><p><code>render</code> 方法的返回值既不是字符串也不是 DOM 节点 —— 它是一种对 DOM 结构轻量级的表述方法。</p></blockquote><p>我们把这个过程叫做<strong>和解</strong>。通过<a href="http://jsfiddle.net/2h6th4ju/">这个 jsFiddle</a> 可以查看一个关于<strong>和解</strong>如何进行的实例。</p><p>因为重新渲染是如此的快速（大概 1 毫秒），开发者无需去明确的声明数据绑定。我们已经证实该方法使得构建 APP 变得简单。</p><h2 id="HTML-仅仅只是开始"><a href="#HTML-仅仅只是开始" class="headerlink" title="HTML 仅仅只是开始"></a>HTML 仅仅只是开始</h2><p>因为 React 拥有对文档独有的轻量级表述方式，我可以利用它做一些非常酷的事情：</p><ul><li>Facebook 有许多渲染在 <code>&lt;canvas&gt;</code> 而不是 HTML 上的动态图表。</li><li>Instagram 是一个完全由 React 和 <code>Backbone.Router</code> 构建的 “单页” web 应用。设计者定期使用 JSX 语法贡献 React 代码。</li><li>我们已经有了一个内部项目原型，该项目使用 Objective-C 作为桥接，使得 React 应用可以运行在一个 web 工作环境中，并使用 React 去驱动<strong>原生 IOS 视图</strong>。</li><li>你可以<a href="https://github.com/petehunt/react-server-rendering-example">在服务端</a>运行 React 来做 SEO、性能优化、代码分享等很多灵活性的内容。</li><li>在所有浏览器中（包括 IE 8）具有统一的、标准的、兼容的行为表现，并且自动使用了<a href="http://davidwalsh.name/event-delegate">事件委托</a>。</li></ul><p>请浏览 <a href="https://reactjs.org/">https://reactjs.org</a> 来了解我们构建了哪些东西。我们的文档是面向如何使用框架一步步构建应用的，但如果你对其中的实现原理感兴趣，请<a href="https://reactjs.org/community/support.html">联系</a>我们！</p><p>感谢阅读！</p><h3 id="译者按"><a href="#译者按" class="headerlink" title="译者按"></a>译者按</h3><p>该文翻译自 <a href="https://reactjs.org/blog/all.html">React 官方博客</a>中的 <a href="https://reactjs.org/blog/2013/06/05/why-react.html">Why did we build React?</a>，发布于 2013 年 6 月 5 日，作者为 <a href="https://twitter.com/floydophone">Pete Hunt</a>。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/post/1c291ca3.html"/>
      <url>/post/1c291ca3.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="97d8e9c3b19de48950b6717a2cc7184fc98526976d7c050a7077fe0c061c8115">28d83ca205d83421dca8e12e12b62819a5cb2c000527b5cda7a0e48e7ce99a7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>波比日记</title>
      <link href="/post/%E6%B3%A2%E6%AF%94%E6%97%A5%E8%AE%B0.html"/>
      <url>/post/%E6%B3%A2%E6%AF%94%E6%97%A5%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p><strong>波比</strong>: 哥，你说的金币是什么啊<br><strong>我</strong>: 就是钱<br><strong>波比</strong>: 哥，那挣金币很容易吗?<br><strong>我</strong>: 容易<br><strong>波比</strong>: 那你第一的时候能带我玩吗<br><strong>我</strong>: 看心情<br><strong>波比</strong>: 噢噢，那哥，你为什么选我啊，是因为我伤害高吗<br><strong>我</strong>: 因为你便宜，过渡用<br><strong>波比</strong>: 肯定是因为我伤害高<br><strong>我</strong>: 因为黑夜里，你能给我带来一些安全感<br><strong>波比</strong>很开心: 就知道哥最喜欢我了</p><p><img src="../images/波比日记/dbdfdf1dbf5fef84a67d815a53f0eb88.png" style="zoom: 33%;" /></p><p><strong>波比</strong>: 哥，为什么我总是在前面啊，我也想上后面去。<br><strong>我</strong>:<strong> 你打不到那么远，你就在前面站着吧</strong>波比**: 好吧，只要哥开心就好</p><p><img src="../images/波比日记/6bce7dc291cd732c95df6ef5ab0cb717.png" style="zoom: 33%;" /></p><p><strong>波比</strong>: 哥，我害怕，好像有很多人朝我这来了</p><p><strong>我没说话</strong></p><p><strong>波比</strong>: 哥你还在吗，你可以帮帮我吗，在我前面放一个五费大哥替我挡一下</p><p><strong>我没说话</strong></p><p><strong>波比</strong>: 对面人好多啊哥，我快坚持不住了，哥你能救救我吗</p><p><strong>波比死了</strong></p><p><img src="../images/波比日记/3fefbba219255796cd7af61355ad7e77.png" style="zoom: 33%;" /></p><p><strong>后来我在波比的日记里面看到</strong><br>我知道哥不喜欢我，我只是个便宜的倒贴货罢了，可是我不敢说，我怕说了哥就不要我了，我既没有三星四费的舒适感，也没有三星五费那么高的伤害，我身上的每一点哥都不喜欢，哥只是想让我去前面等死，给其他大哥们多争取一点时间。但是哥，我也想要你对我好，我也想让你在我前面放一个五费大哥替我抗伤害。可是我知道，我不配…</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 波比 </tag>
            
            <tag> 联盟战棋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么？你给我念了一圈菜谱只为了教我油焖大虾？</title>
      <link href="/post/%E4%BB%80%E4%B9%88%EF%BC%9F%E4%BD%A0%E7%BB%99%E6%88%91%E5%BF%B5%E4%BA%86%E4%B8%80%E5%9C%88%E8%8F%9C%E8%B0%B1%E5%8F%AA%E4%B8%BA%E4%BA%86%E6%95%99%E6%88%91%E6%B2%B9%E7%84%96%E5%A4%A7%E8%99%BE%EF%BC%9F.html"/>
      <url>/post/%E4%BB%80%E4%B9%88%EF%BC%9F%E4%BD%A0%E7%BB%99%E6%88%91%E5%BF%B5%E4%BA%86%E4%B8%80%E5%9C%88%E8%8F%9C%E8%B0%B1%E5%8F%AA%E4%B8%BA%E4%BA%86%E6%95%99%E6%88%91%E6%B2%B9%E7%84%96%E5%A4%A7%E8%99%BE%EF%BC%9F.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c4de0a6a5f87e401c19c6eadf48a79519a50c06f24734f8327adc23b8ae031fc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 菜谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么一个字写很多遍、越写就越陌生</title>
      <link href="/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%80%E4%B8%AA%E5%AD%97%E5%86%99%E5%BE%88%E5%A4%9A%E9%81%8D%E3%80%81%E8%B6%8A%E5%86%99%E5%B0%B1%E8%B6%8A%E9%99%8C%E7%94%9F.html"/>
      <url>/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%80%E4%B8%AA%E5%AD%97%E5%86%99%E5%BE%88%E5%A4%9A%E9%81%8D%E3%80%81%E8%B6%8A%E5%86%99%E5%B0%B1%E8%B6%8A%E9%99%8C%E7%94%9F.html</url>
      
        <content type="html"><![CDATA[<p>你曾经被罚抄书 100 遍吗<sup><a href="#fn_1" id="reffn_1">1</a></sup>？越抄字越怪，越抄它们越不像汉字</p><p>似曾相识（Déjà Vu）的感觉大家都遇到过，明明从来没见过，看到了却觉得曾经见过。现在科学家研究了与 “似曾相识” 相反、更神秘的 “从未见过” 现象（jamais vu） </p><p>最常见的例子跟被罚抄书的体验类似，如果你盯着看这么多个 “我”，越看就越觉得这些字变成了陌生的汉字、甚至陌生的抽象图形，反正越看越不像 “我” </p><p>科学家对此解释是大脑会避免饱和，我们的认知系统必须保持灵活性，使我们能够将注意力转移到需要的地方，而不是在重复性任务中迷失太久<sup><a href="#fn_2" id="reffn_2">2</a></sup> 这项研究获得了今年的搞笑诺贝尔文学奖</p><p><a href="https://www.sciencealert.com/the-opposite-of-dj-vu-exists-and-its-even-more-uncanny">The Opposite of Déjà Vu Exists, And It‘s Even More Uncanny</a></p><blockquote id="fn_1"><sup>1</sup>. 这属于体罚，不符合文明社会的基本标准<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. 人的大脑特别容易疲劳（麻木），产品设计里有一个分支，重点就是避免 “熟视无睹”、“视而不见” 这些大脑疲劳的情况。比如高速公路应该避免很长的直路，以防止司机大脑疲劳、麻痹大意。我没研究过，我猜 “从未见过” 现象（jamais vu）跟这方面的设计思路有关<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 有趣的事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK21 真的来了：虚拟线程正式发布及十多项新特性！</title>
      <link href="/post/JDK21%20%E7%9C%9F%E7%9A%84%E6%9D%A5%E4%BA%86%EF%BC%9A%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%E5%8F%8A%E5%8D%81%E5%A4%9A%E9%A1%B9%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%81.html"/>
      <url>/post/JDK21%20%E7%9C%9F%E7%9A%84%E6%9D%A5%E4%BA%86%EF%BC%9A%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%E5%8F%8A%E5%8D%81%E5%A4%9A%E9%A1%B9%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%81.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>万事万物都经不起审视，因为世上没有同样的成长环境，也没有同样的认知水平，更<strong>「没有适用于所有人的解决方案」</strong>；</p><p>不要急着评判文章列出的观点，只需代入其中，适度审视一番自己即可，能<strong>「跳脱出来从外人的角度看看现在的自己处在什么样的阶段」才不为俗人</strong>。</p><p>怎么想、怎么做，全在乎自己<strong>「不断实践中寻找适合自己的大道」</strong></p></blockquote><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>Java 21 进入发布候选阶段，其中包括 15 个最终特性，包括虚拟线程、分代 Z 垃圾收集器和密钥封装机制 API。</p><p>JDK21 计划于 9 月 19 日作为 Oracle 标准 Java 实现的下一个 LTS 版本发布，已进入发布候选 (RC) 阶段。Java 21 将具有 15 个新特性，之前提议的第 16 个特性实验性 Shenandoah 垃圾收集器已在 6 月被舍弃。</p><p>进入终版的 15 个特性涵盖从字符串模板和结构化并发预览，到虚拟线程和密钥封装机制 (KEM) API 等。JDK 21 于 7 月 20 日进入了第二阶段渐进开发，在 6 月 8 日首次渐进开发后。发布候选阶段从 8 月 10 日开始，与第二阶段渐进开发同时进行。第二个 RC 定于 8 月 24 日发布。Oracle 每 6 个月发布一次标准 Java 新版本，最近的 JDK 20 于 2022 年 3 月 21 日发布。</p><h2 id="2-JDK-21-的具体提案"><a href="#2-JDK-21-的具体提案" class="headerlink" title="2 JDK 21 的具体提案"></a>2 JDK 21 的具体提案</h2><h3 id="2-1-结构化并发（预览）"><a href="#2-1-结构化并发（预览）" class="headerlink" title="2.1 结构化并发（预览）"></a>2.1 结构化并发（预览）</h3><p>通过结构化并发 API 简化了并发编程，将运行在不同线程中的相关任务组视为一个工作单元。这简化了错误处理和取消，提高了可靠性并增强了可观察性。</p><p>结构化并发在 JDK 20 和 JDK 19 (2022 年 3 月、9 月发布) 中进行孵化；它将以预览 API 形式出现在 JUC 包。这次唯一显著的变化是 StructuredTaskScope::Fork (…) 方法返回一个 [Subtask] 而不是 Future。</p><p>结构化并发的目标包括促进一种并发编程风格，可以消除取消和关闭时常见的风险，如线程泄漏和取消延迟，并提高并发代码的可观察性。</p><h3 id="2-2-作用域值"><a href="#2-2-作用域值" class="headerlink" title="2.2 作用域值"></a>2.2 作用域值</h3><p>也处于预览状态，将使线程内外能够共享不可变数据。与线程本地变量相比，它们是首选，尤其是在使用大量虚拟线程时。</p><p>线程本地变量具有设计缺陷，包括不受约束的可变性、无边界的生命周期和昂贵的继承。作用域值允许庞大程序中的组件安全地共享数据，而无需使用方法参数。该提案在 JDK 20 中进行了孵化。该计划的目标包括易用性、可理解性、健壮性和性能。</p><h3 id="2-3-禁止动态加载代理"><a href="#2-3-禁止动态加载代理" class="headerlink" title="2.3 禁止动态加载代理"></a>2.3 禁止动态加载代理</h3><p>一项准备禁止动态加载代理的提议要求，在向运行中的 JVM 动态加载代理时发出警告。这些警告旨在为将来的版本做准备，以默认禁止动态加载代理，以提高完整性。该提案的其他目标包括重新评估：</p><ul><li>可维护性 (涉及对运行代码的特殊修改)</li><li>完整性 (假设运行代码不会任意更改)</li></ul><p>之间的平衡，并确保大多数不需要动态加载代理的工具不受影响。该计划还要求将动态加载代理的能力与 “超能力” 功能 (如深度反射) 保持一致。代理是一种组件，可在应用程序运行时改变应用程序代码。这些组件由 2004 年 JDK 5 中的 Java 平台分析架构引入，作为一种让工具 (特别是分析器) 检测类的方法。尽管代理是为良性检测设计的，但高级开发人员发现了一些用例，如面向切面编程可以任意方式改变应用程序行为。同样，没有什么能阻止代理改变 JDK 本身等代码。JDK 5 要求代理在命令行中指定，以确保应用程序所有者批准使用代理。在 JDK 21 中，计划要求像启动时加载代理一样，需要应用程序所有者批准动态加载代理。这一变化将 Java 平台进一步接近默认完整性。</p><h3 id="2-4-密钥封装机制-API"><a href="#2-4-密钥封装机制-API" class="headerlink" title="2.4 密钥封装机制 API"></a>2.4 密钥封装机制 API</h3><p>一种通过公钥密码学安全封装对称密钥的加密技术。该提案的一个目标是让应用程序能够使用：</p><ul><li>RSA 密钥封装机制 (RSA-KEM)</li><li>椭圆曲线集成加密方案 (ECIES) 等 KEM 算法</li><li>及美国国家标准与技术研究院 (NIST) 后量子密码学标准化过程的候选算法</li></ul><p>另一个目标是能在更高级别的协议 (如传输层安全协议 TLS) 和密码方案 (如混合公钥加密 HPKE) 中使用 KEM。安全提供者可以用 Java 或本机代码实现 KEM 算法，并包含 RFC 9180 中定义的 Diffie-Hellman KEM (DHKEM) 的实现。</p><h3 id="2-5-弃用-Windows-32-位-x86-端口"><a href="#2-5-弃用-Windows-32-位-x86-端口" class="headerlink" title="2.5 弃用 Windows 32 位 x86 端口"></a>2.5 弃用 Windows 32 位 x86 端口</h3><p>以便在未来版本中删除，目的是在未来的版本中删除该端口。该提案旨在更新构建系统，以便尝试为 Windows 32 位 x86 配置构建时发出错误消息。消息可以通过新的配置选项抑制。此外，该计划是将端口及相关的端口特定功能标记为已弃用以删除相关文档。该提案指出，支持 32 位操作的最后一个 Windows 操作系统 Windows 10 将于 2025 年 10 月结束生命周期。</p><h3 id="2-6-无名类和实例-main-方法预览"><a href="#2-6-无名类和实例-main-方法预览" class="headerlink" title="2.6 无名类和实例 main 方法预览"></a>2.6 无名类和实例 main 方法预览</h3><p>旨在使 Java 语言进化，以便学生在无需理解面向大型程序设计的语言特性的情况下编写第一个 Java 程序。学生可以为单类程序编写简化的声明，然后无缝地扩展程序以使用更高级的特性，而不是使用 Java 的单独方言。该提案不仅可以为 Java 提供平稳的入门，而且可以减少编写简单 Java 程序 (如脚本和命令行实用程序) 的麻烦。</p><h3 id="2-7-无名模式和变量的预览"><a href="#2-7-无名模式和变量的预览" class="headerlink" title="2.7 无名模式和变量的预览"></a>2.7 无名模式和变量的预览</h3><p>未命名模式匹配记录组件，而不声明组件的名称或类型，未命名变量可以初始化但不使用。两者都用下划线字符_表示。该提案旨在通过省略不必要的嵌套模式来改善记录模式的可读性，并通过识别必须声明但不会使用的变量来改善所有代码的可维护性。</p><h3 id="2-8-分代-ZGC"><a href="#2-8-分代-ZGC" class="headerlink" title="2.8 分代 ZGC"></a>2.8 分代 ZGC</h3><p>旨在通过为年轻对象和旧对象维护独立的代来改善应用程序性能。年轻对象往往很快就会死亡；维护独立的代将允许 ZGC 更频繁地收集年轻对象。运行在分代 ZGC 上的应用程序应会看到以下好处：分配中断风险更低，需要的堆内存开销更低，垃圾收集 CPU 开销更低。这些好处应该可以在吞吐量不明显下降的情况下实现。</p><h3 id="2-9-记录模式"><a href="#2-9-记录模式" class="headerlink" title="2.9 记录模式"></a>2.9 记录模式</h3><p>在 JDK 19 和 JDK 20 中进行了预览，用于解构记录值。记录模式和类型模式可以嵌套，以启用强大的、声明性的和可组合的数据导航和处理形式。该提案的目标包括扩展模式匹配以解构记录类的实例，添加嵌套模式以启用更可组合的数据查询。此特性与 switch 表达式和语句的模式匹配 (见下文) 共同演化。当前的 JEP 将在继续的经验和反馈的基础上通过进一步完善来最终确定该特性。除了少量编辑变化外，主要变化是删除了记录模式在增强的 for 语句标题中出现的支持。该特性可能会在未来的 JEP 中重新提出。</p><h3 id="2-10-switch-的模式匹配"><a href="#2-10-switch-的模式匹配" class="headerlink" title="2.10 switch 的模式匹配"></a>2.10 switch 的模式匹配</h3><p>使得 switch 表达式或语句可以针对许多模式进行测试，每个模式都有特定的操作，这样复杂的数据查询可以安全简洁地表达。该特性最初在 JDK 17 中提出，之后在 JDK 18、JDK 19 和 JDK 20 中进行了完善。它将在 JDK 21 中通过进一步的优化最终确定。与前面的 JEP 相比，主要变化是删除了带括号的模式并允许合格的 enum 常量，如带 switch 表达式和语句的常量。目标包括通过允许模式出现在 case 标签中来扩展 switch 表达式和语句的表达能力和适用范围，允许 switch 的历史 null 敌意在需要时得到放松，并通过要求模式 switch 语句覆盖所有潜在的输入值来增加 switch 语句的安全性。另一个目标是确保现有的 switch 表达式和语句继续编译而不变，并具有相同的语义。</p><h3 id="2-11-向量-API-的第六个孵化器"><a href="#2-11-向量-API-的第六个孵化器" class="headerlink" title="2.11 向量 API 的第六个孵化器"></a>2.11 向量 API 的第六个孵化器</h3><p>该 API 表达了在支持的 CPU 体系结构上可靠编译为优化向量指令的向量计算，其性能优于等效的标量计算。向量 API 此前在 JDK 16 至 JDK 20 中进行了孵化。这个最新版本包括性能增强和错误修复。该提案的目标包括清晰简洁，与平台无关，并在 x64 和 AArch64 体系结构上提供可靠的运行时编译和性能。其他目标包括在向量计算无法完全表示为向量指令序列时优雅降级。</p><h3 id="2-12-外部函数和内存-API-的第三次预览"><a href="#2-12-外部函数和内存-API-的第三次预览" class="headerlink" title="2.12 外部函数和内存 API 的第三次预览"></a>2.12 外部函数和内存 API 的第三次预览</h3><p>它使 Java 程序能够与 Java 运行时之外的代码和数据进行互操作。通过高效调用外部函数和安全访问外部内存，该 API 使 Java 程序能够调用本机库并处理本机数据，而无需使用 JNI (Java 本机接口) 的脆弱性和危险性。该 API 此前在 JDK 20 和 JDK 19 中进行了预览。JDK 21 预览中的改进包括带有新的元素来解引用地址布局的增强布局路径、Arena 接口中的本地段生命周期的集中管理、备用本机链接器实现以及 VaList 的删除。该提案的目标包括易用性、性能、通用性和安全性。它的目标不是在此 API 之上重新实现 JNI, 也不是以任何方式更改 JNI。</p><h3 id="2-13-虚拟线程"><a href="#2-13-虚拟线程" class="headerlink" title="2.13 虚拟线程"></a>2.13 虚拟线程</h3><p>是轻量级线程，它承诺大大减少编写、维护和观察高吞吐量并发应用程序的工作量。该计划的目标包括使按线程请求风格编写的服务器应用程序能够在接近最佳硬件利用率的情况下扩展，使使用 lang.Thread API 的现有代码通过最小更改采用虚拟线程，并使用当前 JDK 工具轻松调试和分析虚拟线程。虚拟线程在 JDK 20 和 JDK 19 中进行了预览，将在 JDK 21 中最终确定。在 JDK 21 中，虚拟线程现在始终支持线程本地变量，并使创建不具有这些变量的虚拟线程成为不可能。保证对线程本地变量的支持可以确保更多现有库可以不变地与虚拟线程一起使用，并帮助将面向任务的代码迁移到使用虚拟线程。</p><h3 id="2-14-序列集合"><a href="#2-14-序列集合" class="headerlink" title="2.14 序列集合"></a>2.14 序列集合</h3><p>提案引入了表示具有定义遭遇顺序的集合的接口。每个集合都有明确定义的第一个和第二个元素等，直到最后一个元素。提供了统一的 API 来接受第一个和最后一个元素并以相反顺序处理元素。该提案的动机是 Java 的集合框架缺少表示具有定义遭遇顺序的元素序列的集合类型。它还缺少适用于这些集合的统一操作集。这些缺陷一直是个问题和抱怨的来源。该提案要求为序列集合、集合和映射定义接口，并将这些接口 retrofit 到现有的集合类型层次结构中。所有这些新方法都有默认实现。</p><h3 id="2-15-字符串模板"><a href="#2-15-字符串模板" class="headerlink" title="2.15 字符串模板"></a>2.15 字符串模板</h3><p>JDK 21 中的预览功能，它通过将字面文本与嵌入式表达式和处理器结合来补充 Java 的现有字符串文本块，以产生特定结果。这种语言特性和 API 旨在通过使动态计算的值易于表示字符串来简化 Java 程序的编写。它有望增强表达式的可读性，提高程序安全性，保持灵活性，并简化使用以非 Java 语言编写的字符串的 API。启用从字面文本和嵌入式表达式组合派生非字符串表达式的开发也是一个目标。</p><p>与这些 JDK 增强提案分开，据 Oracle 的 Java 团队称，JDK 21 将更改 JDK 在 Windows 上为网络接口分配名称的方式。执行网络多播或使用 java.net.NetworkInterface API 的应用程序维护人员应注意此更改。</p><p>JDK 历史上为 Windows 上的网络接口合成名称。这已更改为使用 Windows 操作系统分配的名称。此更改可能会影响使用 NetworkInterface.GetbyName (String name) 方法查找网络接口的代码。JDK 21 还将在 JDK 飞行记录器中进行关键更改，包括使从命令行分析飞行记录更加容易。</p><p>作为 LTS 版本，JDK 21 将获得 5 年首要支持和直到 2031 年 9 月的延长支持。当前的 LTS 版本是在 2021 年 9 月发布的 JDK 17。非 LTS 版本 (如 JDK 20 和 JDK 19) 仅获得 6 个月的首要支持，没有延长支持。LTS 版本每两年发布一次。</p><p>参考</p><ul><li><a href="https://openjdk.org/projects/jdk/21/">JDK 21 </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
            <tag> JDK21 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流浪在被资本定义的情感世界里</title>
      <link href="/post/%E6%B5%81%E6%B5%AA%E5%9C%A8%E8%A2%AB%E8%B5%84%E6%9C%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E6%83%85%E6%84%9F%E4%B8%96%E7%95%8C%E9%87%8C.html"/>
      <url>/post/%E6%B5%81%E6%B5%AA%E5%9C%A8%E8%A2%AB%E8%B5%84%E6%9C%AC%E5%AE%9A%E4%B9%89%E7%9A%84%E6%83%85%E6%84%9F%E4%B8%96%E7%95%8C%E9%87%8C.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d1889bb095b387099090655cae46e5e1e50db1d018c7b74341c638447d303ad7">28d83ca205d83421dca8e12e12b62819e04f45cc33e4f54c8389e84ae2a2d2b94e362fb1a71581fc22e270ffbf22a105ca0536b5f599cd4423071d7fc6216f6fdcea52b05e731c4aa27c08be709d1426165753562817614e041d62b675ca651f1a1bb28fbbad70a535715869bd00b8c5b09a74415bfe2e5d086b3d0c99264d1c395971e162b505d55d4a025e95931250e9ab11adaccd7cd8515917553f00b7cefaa99480f2ff9e4a847e472a9aa590aca664bcf5a9c7b38aae292e276b112e17861164e72502d4d72b96010f7eabe2b85d953853c60c3d33177714eef8d13219b944cb0b9660bb850f9609f4c1539a753974098b03495f1cdd6b7ae2b77c5e4bee6758720e7c79f616e1306db57e6598bed906aaf1fc6575def18dc02c04a7a86dd8176b79fbb5f5fde5176f661c7a59399ebe011de747f5d2b6a1d78f7ac1307f5b9a8c8e6b1e509032bb503fa4543316ed9dbdec1635f56b43f82d8f308d1523bbdebdabe02f71a86d89ada08f9eab24af6376c7efa2199c96fbd787ede8164a2fe41fd41ad95822ebdb835ac6c5e7447e6a86da3996815a2ea227f73a79b1150cd058ffb10c00cbe8090ec3fdacdf548c011f52c71ca6e09df4a2fc843daec9971f90e0debdc4735220c41d681e70ef5d77eab21deece315b0bc54f87fe48bbd14041c12b61cf3f2c3066e20d7b811721e21cbbaaa62928d76d64d3b5f83cd1cc7594c83f2c5101d83de61d18a9652f9a1d3e4b14f44f79902f9989bdfa39186a8ae0ce7549f1d7a1650270297ed104e45b617d2d97d76e957596f4648274a40b73b60f84c150d8375aa40cb3c57578bad9139cc671c7ab4d04941b572f8a2dcd508f34258ef0bcd233c3266878e5f5aca9628224c8a99f6a74b61611fb3a9be5fbdaaed2c17dcbe91544a60a39cb6e94de591c00b68a593d2cecce8df402942068367936da42b50ede39158ba8d20ed11423de4335da4e8c7f4305b92084a11199e998dc6426ac02c7e36485e5428bd61c412a9e2af815fa1de33b28b0774aab6434e10f00452b42c776f74523997d64e09e8d179e23183302aecfc8907cd9c6fcc1dd0cbf338b5f1bbd6303e68c04ab9312ca174a7206757f4edb099df47a45ceb3d88a2156d7aa5160e4099fb2a12c0bf944f624cf2504a42389b4102b7395030ac41fd682c1c7de1b6fc6fb0fe40fd04ebc3321a9a69578e9925986dea9f15914be176e8ff9f0ab6e37a5ae9ed760d49d5c3196cede6670e62e10ac520fc323e79717890e587f4f2dc8b4330243975468b3d30cc3cb89566f2617cb680c5cca114e888c7430b13dbd52b0b22b0ca9f45c8c5fdf521ddb4efb36ea620fef5e48c0b386466c3ff707378d611a5e7a30a707669241ca40a06059eafea5380be4e5ae4a3606039f8157821afe52138e6fee6531bfc5394c73355bb8453eb0703bd3ca2e8d3d552bf1e78d570abf04eaf8f8af46a48ee80d1d6a96b7816d2e884196fca66f74b78d0e9077e4889d19dd3fed6d3291905011243fd69f9135e284d7d80ed47fd111a2ad387ab0112f3a933fb9c05bedc7e1be4f0a23e429df3d62024f607728ba93cc3812d7c28e318d4114d0478357124c172e8ab1a594e12ad83d29d2340d7e661134584ed6f20f0d8feee02a3298fcfd4b3dd057428e8f574922473e981175ff336b4c275d42688ac66db6f35d187a7a343f18c59439cd24fef01e6f40243423c0a4a777456e414346721861daa9728a60c08039b5d4b90ae5c3a3480e3904b92b3a6ec267ced17b8ec2d28b54b1662476c03e9a023f0fe8e45102f591bfb910368b4d29ea53b661635fffe6be8bd42df5ab889952d4398705ed0dc5baf87b649158e70b6153d7f8ddb48b2d585c7394ac44f596bcf95125eb727adbf2967823bca3fc9a3686d4cfc3eed4225bdd51319d45729c85c63cc1bdda6ec69de67f45451155931344b0c7e21600fe621226752a7015c775a15acc414e162a7d20276f5f075a2607f5365ffdb64aee3c6672943e64ab0bab4c43afb35d2cc0dee4e0937ce0f3d5740cc2fd36c5fb2176451a2dcaa07bf0934bd25008569a0450ff1f25add48f02a86063b0c2c7b63b50f7f3ef0f27a5b9fb831a9baa08767728388be01f67582a685b42f8c75414136c8fe9990ae8e49a3eb23b77d605f9f621aad3bbc590186be4b39f92</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大厂都在用的Git管理规范</title>
      <link href="/post/%E5%A4%A7%E5%8E%82%E9%83%BD%E5%9C%A8%E7%94%A8%E7%9A%84Git%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83.html"/>
      <url>/post/%E5%A4%A7%E5%8E%82%E9%83%BD%E5%9C%A8%E7%94%A8%E7%9A%84Git%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a2cdeb9ccc9fe2ccd9071b96622ac4cff4c17705a8e3465ddf268a8f4393ec1b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Git管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> Git </tag>
            
            <tag> Git管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus的join联表查询</title>
      <link href="/post/MyBatisPlus%E7%9A%84join%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2.html"/>
      <url>/post/MyBatisPlus%E7%9A%84join%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2.html</url>
      
        <content type="html"><![CDATA[<p>众所周知，mybatis plus 封装的 mapper 不支持 join，如果需要支持就必须自己去实现。但是对于大部分的业务场景来说，都需要多表 join，要不然就没必要采用关系型数据库了。</p><p>那么有没有一种不通过硬 SQL 的形式，通过框架提供 join 能力呢？答案是，可以有。经过一段时间的插眼排眼操作，成功的封装了一个 jar 包。本文讲讲它的用法。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>Maven</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.yulichang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-join&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>Gradle</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.github.yulichang:mybatis-plus-join:1.2.4&#x27;</span></span><br></pre></td></tr></table></figure><p>或者 clone 代码到本地执行 mvn install，再引入以上依赖。</p><p>注意：mybatis plus version &gt;= 3.4.0。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>mapper 继承 MPJBaseMapper (必选)</li><li>service 继承 MPJBaseService (可选)</li><li>serviceImpl 继承 MPJBaseServiceImpl (可选)</li></ul><h2 id="核心类-MPJLambdaWrapper-和-MPJQueryWrapper"><a href="#核心类-MPJLambdaWrapper-和-MPJQueryWrapper" class="headerlink" title="核心类 MPJLambdaWrapper 和 MPJQueryWrapper"></a>核心类 MPJLambdaWrapper 和 MPJQueryWrapper</h2><h3 id="MPJLambdaWrapper-用法"><a href="#MPJLambdaWrapper-用法" class="headerlink" title="MPJLambdaWrapper 用法"></a>MPJLambdaWrapper 用法</h3><h4 id="简单的三表查询"><a href="#简单的三表查询" class="headerlink" title="简单的三表查询"></a>简单的三表查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserDTO&gt; list = userMapper.selectJoinList(UserDTO.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MPJLambdaWrapper</span>&lt;UserDO&gt;()</span><br><span class="line">                        .selectAll(UserDO.class)</span><br><span class="line">                        .select(UserAddressDO::getTel)</span><br><span class="line">                        .selectAs(UserAddressDO::getAddress, UserDTO::getUserAddress)</span><br><span class="line">                        .select(AreaDO::getProvince, AreaDO::getCity)</span><br><span class="line">                        .leftJoin(UserAddressDO.class, UserAddressDO::getUserId, UserDO::getId)</span><br><span class="line">                        .leftJoin(AreaDO.class, AreaDO::getId, UserAddressDO::getAreaId)</span><br><span class="line">                        .eq(UserDO::getId, <span class="number">1</span>)</span><br><span class="line">                        .like(UserAddressDO::getTel, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                        .gt(UserDO::getId, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    t.id,</span><br><span class="line">    t.name,</span><br><span class="line">    t.sex,</span><br><span class="line">    t.head_img,</span><br><span class="line">    t1.tel,</span><br><span class="line">    t1.address <span class="keyword">AS</span> userAddress,</span><br><span class="line">    t2.province,</span><br><span class="line">    t2.city </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">user</span> t </span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_address t1 <span class="keyword">ON</span> t1.user_id <span class="operator">=</span> t.id </span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> area t2 <span class="keyword">ON</span> t2.id <span class="operator">=</span> t1.area_id </span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    t.id <span class="operator">=</span> ? </span><br><span class="line">    <span class="keyword">AND</span> t1.tel <span class="keyword">LIKE</span> ? </span><br><span class="line">    <span class="keyword">AND</span> t.id <span class="operator">&gt;</span> ?)</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>UserDTO.class 查询结果返回类 (resultType)</li><li>selectAll () 查询指定实体类的全部字段</li><li>select () 查询指定的字段，支持可变参数，同一个 select 只能查询相同表的字段 故将 UserAddressDO 和 AreaDO 分开为两个 select ()</li><li>selectAs () 字段别名查询，用于数据库字段与业务实体类属性名不一致时使用</li><li>leftJoin () 参数说明 第一个参数：参与连表的实体类 class 第二个参数：连表的 ON 字段，这个属性必须是第一个参数实体类的属性 第三个参数：参与连表的 ON 的另一个实体类属性</li><li>默认主表别名是 t, 其他的表别名以先后调用的顺序使用 t1,t2,t3….</li><li>条件查询，可以查询主表以及参与连接的所有表的字段，全部调用 mp 原生的方法，正常使用没有 sql 注入风险</li></ul><p>MPJLambdaWrapper 还有很多其他的功能</p><ul><li>简单的 SQL 函数使用：<code>https://gitee.com/best_handsome/mybatis-plus-join/wikis/selectFunc()?sort_id=4082479</code></li><li>ON 语句多条件支持：<code>https://gitee.com/best_handsome/mybatis-plus-join/wikis/leftJoin?sort_id=3496671</code></li></ul><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        IPage&lt;UserDTO&gt; iPage = userMapper.selectJoinPage(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>, <span class="number">10</span>), UserDTO.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MPJLambdaWrapper</span>&lt;UserDO&gt;()</span><br><span class="line">                        .selectAll(UserDO.class)</span><br><span class="line">                        .select(UserAddressDO::getTel)</span><br><span class="line">                        .selectAs(UserAddressDO::getAddress, UserDTO::getUserAddress)</span><br><span class="line">                        .select(AreaDO::getProvince, AreaDO::getCity)</span><br><span class="line">                        .leftJoin(UserAddressDO.class, UserAddressDO::getUserId, UserDO::getId)</span><br><span class="line">                        .leftJoin(AreaDO.class, AreaDO::getId, UserAddressDO::getAreaId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t.id,</span><br><span class="line">    t.name,</span><br><span class="line">    t.sex,</span><br><span class="line">    t.head_img,</span><br><span class="line">    t1.tel,</span><br><span class="line">    t1.address <span class="keyword">AS</span> userAddress,</span><br><span class="line">    t2.province,</span><br><span class="line">    t2.city</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">user</span> t</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_address t1 <span class="keyword">ON</span> t1.user_id <span class="operator">=</span> t.id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> area t2 <span class="keyword">ON</span> t2.id <span class="operator">=</span> t1.area_id</span><br><span class="line">LIMIT ?,?</span><br></pre></td></tr></table></figure><h3 id="MPJQueryWrapper"><a href="#MPJQueryWrapper" class="headerlink" title="MPJQueryWrapper"></a>MPJQueryWrapper</h3><h4 id="简单的-3-表查询"><a href="#简单的-3-表查询" class="headerlink" title="简单的 3 表查询"></a>简单的 3 表查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserDTO&gt; list = userMapper.selectJoinList(UserDTO.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MPJQueryWrapper</span>&lt;UserDO&gt;()</span><br><span class="line">                        .selectAll(UserDO.class)</span><br><span class="line">                        .select(<span class="string">&quot;addr.tel&quot;</span>, <span class="string">&quot;addr.address&quot;</span>, <span class="string">&quot;a.province&quot;</span>)</span><br><span class="line">                        .leftJoin(<span class="string">&quot;user_address addr on t.id = addr.user_id&quot;</span>)</span><br><span class="line">                        .rightJoin(<span class="string">&quot;area a on addr.area_id = a.id&quot;</span>)</span><br><span class="line">                        .like(<span class="string">&quot;addr.tel&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                        .le(<span class="string">&quot;a.province&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t.id,</span><br><span class="line">    t.name,</span><br><span class="line">    t.sex,</span><br><span class="line">    t.head_img,</span><br><span class="line">    addr.tel,</span><br><span class="line">    addr.address,</span><br><span class="line">    a.province</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">user</span> t</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_address addr <span class="keyword">on</span> t.id <span class="operator">=</span> addr.user_id</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> area a <span class="keyword">on</span> addr.area_id <span class="operator">=</span> a.id</span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    addr.tel <span class="keyword">LIKE</span> ?</span><br><span class="line">    <span class="keyword">AND</span> a.province <span class="operator">&lt;=</span> ?)</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>UserDTO.class 查询结果类 (resultType)</li><li>selectAll (UserDO.class) 查询主表全部字段 (主表实体类) 默认主表别名 “t”</li><li>select () mp 的 select 策略是覆盖，以最后一次为准，这里的策略是追加，可以一直 select 主表字段可以用 lambda, 会自动添加表别名，主表别名默认是 t , 非主表字段必须带别名查询</li><li>leftJoin () rightJoin () innerJoin () 传 sql 片段 格式 (表 + 别名 + 关联条件)</li><li>条件查询，可以查询主表以及参与连接的所有表的字段，全部调用 mp 原生的方法，正常使用没有 sql 注入风险</li></ul><h4 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        IPage&lt;UserDTO&gt; page = userMapper.selectJoinPage(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">10</span>), UserDTO.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MPJQueryWrapper</span>&lt;UserDO&gt;()</span><br><span class="line">                        .selectAll(UserDO.class)</span><br><span class="line">                        .select(<span class="string">&quot;addr.tel&quot;</span>, <span class="string">&quot;addr.address&quot;</span>)</span><br><span class="line">                        .select(<span class="string">&quot;a.province&quot;</span>)</span><br><span class="line">                        .leftJoin(<span class="string">&quot;user_address addr on t.id = addr.user_id&quot;</span>)</span><br><span class="line">                        .rightJoin(<span class="string">&quot;area a on addr.area_id = a.id&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t.id,</span><br><span class="line">    t.name,</span><br><span class="line">    t.sex,</span><br><span class="line">    t.head_img,</span><br><span class="line">    addr.tel,</span><br><span class="line">    addr.address,</span><br><span class="line">    a.province</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">user</span> t</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_address addr <span class="keyword">on</span> t.id <span class="operator">=</span> addr.user_id</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> area a <span class="keyword">on</span> addr.area_id <span class="operator">=</span> a.id </span><br><span class="line">LIMIT ?,?</span><br></pre></td></tr></table></figure><h4 id="还可以这么操作，但不建议"><a href="#还可以这么操作，但不建议" class="headerlink" title="还可以这么操作，但不建议"></a>还可以这么操作，但不建议</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserDTO&gt; list = userMapper.selectJoinList(UserDTO.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MPJQueryWrapper</span>&lt;UserDO&gt;()</span><br><span class="line">                        .selectAll(UserDO.class)</span><br><span class="line">                        .select(<span class="string">&quot;addr.tel&quot;</span>, <span class="string">&quot;addr.address&quot;</span>)</span><br><span class="line">                        <span class="comment">//行列转换</span></span><br><span class="line">                        .select(<span class="string">&quot;CASE t.sex WHEN &#x27;男&#x27; THEN &#x27;1&#x27; ELSE &#x27;0&#x27; END AS sex&quot;</span>)</span><br><span class="line">                        <span class="comment">//求和函数</span></span><br><span class="line">                        .select(<span class="string">&quot;sum(a.province) AS province&quot;</span>)</span><br><span class="line">                        <span class="comment">//自定义数据集</span></span><br><span class="line">                        .leftJoin(<span class="string">&quot;(select * from user_address) addr on t.id = addr.user_id&quot;</span>)</span><br><span class="line">                        .rightJoin(<span class="string">&quot;area a on addr.area_id = a.id&quot;</span>)</span><br><span class="line">                        .like(<span class="string">&quot;addr.tel&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                        .le(<span class="string">&quot;a.province&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                        .orderByDesc(<span class="string">&quot;addr.id&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t.id,</span><br><span class="line">    t.name,</span><br><span class="line">    t.sex,</span><br><span class="line">    t.head_img,</span><br><span class="line">    addr.tel,</span><br><span class="line">    addr.address,</span><br><span class="line">    <span class="keyword">CASE</span> t.sex <span class="keyword">WHEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> sex,</span><br><span class="line">    <span class="built_in">sum</span>(a.province) <span class="keyword">AS</span> province</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">user</span> t</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_address) addr <span class="keyword">on</span> t.id <span class="operator">=</span> addr.user_id</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> area a <span class="keyword">on</span> addr.area_id <span class="operator">=</span> a.id</span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    addr.tel <span class="keyword">LIKE</span> ?</span><br><span class="line">    <span class="keyword">AND</span> a.province <span class="operator">&lt;=</span> ?)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    addr.id <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>针对以上 jar 感兴趣的，可以下载对应的源码，进一步的学习！</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis Plus Join </tag>
            
            <tag> MyBatis Plus </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 速查表：必备的 12 个 Git 命令</title>
      <link href="/post/Git%20%E9%80%9F%E6%9F%A5%E8%A1%A8%EF%BC%9A%E5%BF%85%E5%A4%87%E7%9A%84%2012%20%E4%B8%AA%20Git%20%E5%91%BD%E4%BB%A4.html"/>
      <url>/post/Git%20%E9%80%9F%E6%9F%A5%E8%A1%A8%EF%BC%9A%E5%BF%85%E5%A4%87%E7%9A%84%2012%20%E4%B8%AA%20Git%20%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>虽然在使用 Git 的最基本级别时不需要这些中级命令，但它们可以帮助用户提高使用 Git 的效率。它们提供了一组强大的功能，可以帮助您成为一个全面发展的开发者，这通常意味着能够以创造性的方式解决问题。</p></blockquote><p>在本篇文章中，我们将介绍必备的 12 个 Git 命令。</p><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>git config 命令用于设置 Git 配置。使用这个命令，用户可以在三个不同级别设置配置：</p><ul><li>本地级别：在特定的 Git 仓库中（存储在项目根目录的 .git/config 文件中）。</li><li>全局级别：针对操作系统中的当前用户。</li><li>系统级别：针对操作系统中的所有用户。</li></ul><p>默认情况下，git config 命令会更改本地级别的设置。此命令可用于设置诸如 Git 用户名、电子邮件地址、默认文本编辑器（如 Vim）、默认合并行为、终端输出外观和别名等信息。</p><p>例如，可以使用以下命令设置当前用户的名称和电子邮件：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git config <span class="comment">--global user.name &quot;Your Name&quot;</span></span><br><span class="line">git config <span class="comment">--global user.email &quot;name@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>可以使用以下命令将 Git 的默认文本编辑器设置为 Vim：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git config <span class="comment">--global core.editor &quot;vim&quot;</span></span><br></pre></td></tr></table></figure><p>列出所有当前 Git 的配置：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git config <span class="comment">--list --show-origin</span></span><br></pre></td></tr></table></figure><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>git mv 命令用于在 Git 仓库中移动和 / 或重命名文件。该命令会在工作目录中移动文件，并更新 Git 索引中旧文件路径和新文件路径。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git mv path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>old_file_name.ext path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>new_file_name.ext</span><br></pre></td></tr></table></figure><p>需要注意的是，文件在您的文件系统中也会被重命名 / 移动，所以这个命令一举两得。然而，旧文件的历史记录都被 Git 跟踪了，所以如果您发现需要旧版本，可以随时找回。</p><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>git rm 命令用于从 Git 仓库中删除文件。它会在工作目录中删除文件，并从 Git 索引中移除文件。</p><p>要删除特定文件：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git rm path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>filename.ext</span><br></pre></td></tr></table></figure><p>需要注意的是，此命令会从您的文件系统中删除文件。然而，已删除文件的历史记录仍被 Git 跟踪，所以如果您后来发现需要它，可以随时找回。</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>git diff 命令用于显示提交、分支以及其他代码状态之间的差异。默认情况下，git diff 显示工作树与暂存区之间的差异。</p><p>该命令还可用于比较分支之间的差异：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git diff branch1 branch2</span><br></pre></td></tr></table></figure><p>或者用于比较两个提交之间的差异：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git diff commitID1 commitID2</span><br></pre></td></tr></table></figure><p>为了比较一个特定文件，也可以加上第三个文件名参数：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git diff commitID1 commitID2 file_to_compare.ext</span><br></pre></td></tr></table></figure><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>git reset 命令用于将分支恢复到先前的状态。当给出提交、分支或其他引用时，该命令将分支和 HEAD 引用移动到指向该引用的位置。如果未提供引用参数，则默认将引用指向 HEAD。</p><p>该命令提供了三种操作模式：soft, mixed，和 hard。使用 soft 选项时，索引会被更新，但暂存的提交和工作目录保持不变。使用 mixed 选项（默认选项）时，索引将被重置，已暂存的更改将被移回工作目录。使用 hard 选项时，索引和工作目录都会被重置，所有更改都将丢失。</p><p>要将暂存区重置为与最近的提交匹配，而不丢失工作区的任何数据，请使用以下命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><p>撤销所有当前的更改并将工作区重置为与最近的提交匹配，请使用以下命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git reset <span class="comment">--hard</span></span><br></pre></td></tr></table></figure><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>git tag 命令用于创建一个人类可读的标签（例如版本号），用于引用存储库中特定的提交。标签在本质上是一个引用，类似于分支名称，但标签通常是静态的，因为它们指向单个提交，而分支名称是动态的，因为它们跟踪分支的末端，并随着新的提交添加而更新。通常情况下，标签在标记发布版本时很有用。</p><p>为当前签出的 Git 提交创建一个标记：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git tag tag_name</span><br></pre></td></tr></table></figure><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>Git rebase 命令允许用户将一系列提交移动到一个新的基础提交上。如果用户提供了一个引用参数，则该分支将在该分支上进行 rebase。否则，默认情况下，该分支将在远程分支上进行 rebase。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git rebase origin</span><br></pre></td></tr></table></figure><p>通过在 rebase 命令中添加 -i 选项，用户可以执行交互式 rebase。在交互式 rebase 中，用户还可以组合、拆分、重新排序、删除和编辑提交记录。</p><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>git cherry-pick 命令接受一个或多个提交记录，并将它们应用到一个现有的分支上。该命令提供了一种快速将提交记录添加到多个分支的方式，而无需执行 rebase 操作。</p><p>要将单个提交记录选取并应用到当前分支上，可以执行以下操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git cherry<span class="operator">-</span>pick commitID</span><br></pre></td></tr></table></figure><p>用户也可以选取一系列提交记录并将它们应用到分支上。默认情况下，cherry-pick 不包含第一个提交记录，但会包含最后一个提交记录。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git cherry<span class="operator">-</span>pick oldest_commit...newest_commit</span><br></pre></td></tr></table></figure><p>要让 cherry-pick 命令包含第一个和最后一个提交记录，可以将命令更新如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git cherry<span class="operator">-</span>pick oldest_commit<span class="operator">^</span>...newest_commit</span><br></pre></td></tr></table></figure><h2 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git bisect"></a>git bisect</h2><p>git bisect 命令用于通过对提交历史记录进行二分查找来分离出特定的提交记录。该命令在帮助我们找出是哪个提交引入了 bug 时非常有用。</p><p>要运行这个命令，需要先找到一个问题未发生的过去提交记录，这里称之为 “good_commit_id”。然后在最近的分支上运行以下命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git bisect <span class="keyword">start</span></span><br><span class="line">git bisect bad</span><br><span class="line">git bisect good good_commit_id</span><br></pre></td></tr></table></figure><p>Git 会对提交记录进行二分查找，它会检查当前提交和上一个好的提交之间的提交记录。此时，开发人员需要检查或测试代码，以确定 bug 是否仍然存在。如果 bug 仍然存在，则运行 git bisect bad 命令；如果 bug 不存在，则运行 git bisect good 命令。</p><p>一旦找到了引入 bug 的提交记录，搜索就会返回第一个坏的提交记录的 commit ID。从这里开始，用户可以检查引入 bug 的提交记录。然后可以使用 git bisect reset 命令将分支恢复到执行搜索之前的状态。</p><p>这为开发人员快速追踪 bug 的源头提供了一种方法，因为每次将提交历史记录分成两半，可以指数级地减少需要手动检查的提交记录数量。</p><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>git revert 命令用于撤消之前提交的更改。该命令接受一个 commit ID，然后在当前分支上创建一个新的提交记录，以反转 revert 提交记录中的更改。这种方法允许用户撤消一个更改，而无需重写历史记录。执行该命令将在分支的末尾产生一个新的提交记录，用于撤消 revert 的提交记录中的更改。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git revert commitID</span><br></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>git fetch 命令用于从远程仓库下载引用（包括标签和分支）。它会下载新创建的引用，并完成本地已存储引用的历史记录。与 git pull 不同，git fetch 命令不会更新本地仓库的工作状态，也不会执行合并操作。默认情况下，git fetch 命令会获取当前仓库的所有引用。</p><p>要从远程仓库获取所有引用，请使用以下命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">fetch</span> origin</span><br></pre></td></tr></table></figure><p>要从特定分支获取引用，请使用以下命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">fetch</span> origin branch_name</span><br></pre></td></tr></table></figure><h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><p>通过 git blame 命令，用户可以查看文件中每一行最后一次修改的时间以及进行修改的责任人。该工具对于理解文件的历史记录非常有用，可以帮助用户确定在代码更改方面应该向谁寻求问题或建议。</p><p>要查看特定文件的此信息，请使用以下命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git blame path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>filename.ext</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然在使用 Git 的最基本级别时不需要这些中级命令，但它们可以帮助用户提高使用 Git 的效率。它们提供了一组强大的功能，可以帮助您成为一个全面发展的开发者，这通常意味着能够以创造性的方式解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> Git知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日随想</title>
      <link href="/post/%E4%BB%8A%E6%97%A5%E9%9A%8F%E6%83%B3.html"/>
      <url>/post/%E4%BB%8A%E6%97%A5%E9%9A%8F%E6%83%B3.html</url>
      
        <content type="html"><![CDATA[<h2 id="那天早上的雾散了，不止早上，不止雾"><a href="#那天早上的雾散了，不止早上，不止雾" class="headerlink" title="那天早上的雾散了，不止早上，不止雾"></a>那天早上的雾散了，不止早上，不止雾</h2><span id="more"></span><p>如果不是在一种理想中来考察我的生活，那么生活的平庸将使我痛苦不堪。<br>而在我怀有这种念头的时候，我们碰见了，你走进了我的生活，你是我最优雅的朋友，这并不困难，因为一看到你我就知道了，你和我站在世界的同一边。<br>更何况，我们还有那一次彻夜的长谈。<br>但是，我们的关系里拥有不纯之处，它不能以愉快和不愉快而论，我只想生活得强烈一些，这个态度在你和我的关系里再明显不过了。<br>因为有些时候，情况显然是我把自己的心意强加于你了。<br>欲望受到侵蚀，行动定要受阻，就是在爱情里我也体会到这一点，根本不存在出路，只存在幻想，幻想一这致命的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
